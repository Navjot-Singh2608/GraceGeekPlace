// (C) 2020 GoodData Corporation
import { shouldHidePPExperience, isFreemiumEdition, updatePrivateFFForPPInBootstrap } from '../featureFlags'

describe('featureFlags utils', () => {
    describe('shouldHidePPExperience', () => {
        it('should not hide pixel perfect experience for free/growth user', () => {
            const shouldHidePixelperfect = shouldHidePPExperience({
                enablePixelPerfectExperience: 'true',
                platformEdition: 'growth',
                hidePixelPerfectExperience: false
            });
            expect(shouldHidePixelperfect).toBe(false);
        });

        it('should hide pixel perfect experience for free/growth user when enablePixelPerfectExperience is false', () => {
            const shouldHidePixelperfect = shouldHidePPExperience({
                enablePixelPerfectExperience: 'false',
                platformEdition: 'growth',
                hidePixelPerfectExperience: false
            });
            expect(shouldHidePixelperfect).toBe(true);
        });

        it('should hide pixel perfect experience when hidePixelPerfectExperience is true', () => {
            const shouldHidePixelperfect = shouldHidePPExperience({
                hidePixelPerfectExperience: true,
                enablePixelPerfectExperience: 'false',
                platformEdition: 'growth'
            });
            expect(shouldHidePixelperfect).toBe(true);
        });
    });

    describe('isFreemiumEdition', () => {
        it('should return false when user is not free/growth', () => {
            const isFreemiumCustomer = isFreemiumEdition('enterprise');
            expect(isFreemiumCustomer).toBe(false);
        });

        it('should return true when user is free/growth', () => {
            const isFreemiumCustomer = isFreemiumEdition('growth');
            expect(isFreemiumCustomer).toBe(true);
        });
    });

    describe('updatePrivateFFForPPInBootstrap', () => {
        it('should update private feature flags for pixel perfect', () => {
            const bootstrapData = {
                bootstrapResource: {
                    current: {
                        featureFlags: {
                            platformEdition: 'free',
                            enablePixelPerfectExperience: 'false',
                            portalLogoPage: '/logo',
                            hidePixelPerfectExperience: false,
                        }
                    },
                    accountSetting: {
                        links: {
                            self: '/gdc/profile/user123',
                        }
                    }
                }
            };
            const normalizedFeatureFlags = {
                platformEdition: {
                    value: 'growth',
                    source: 'user'
                },
                enablePixelPerfectExperience: {
                    value: 'true',
                    source: 'user'
                },
                portalLogoPage: {
                    value: '/logo1',
                    source: 'user'
                }
            };
            const bootstapDataResult = updatePrivateFFForPPInBootstrap(bootstrapData, normalizedFeatureFlags);
            const { featureFlags } = bootstapDataResult.bootstrapResource.current;

            expect(featureFlags).toEqual({
                platformEdition: 'growth',
                enablePixelPerfectExperience: 'true',
                portalLogoPage: '/logo1',
                hidePixelPerfectExperience: false
            })
        })
    });
})
