"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// (C) 2007-2018 GoodData Corporation
var omit_1 = __importDefault(require("lodash/omit"));
var routes_1 = require("./routes");
exports.transformDomainSegment = function (item) {
    var _a = routes_1.parse(item.domainSegment.links.self, routes_1.CONTRACT_DATA_PRODUCT_DOMAIN_SEGMENT), contractId = _a.contractId, dataProductId = _a.dataProductId, segmentId = _a.segmentId, domainId = _a.domainId;
    return __assign({ contractId: contractId,
        dataProductId: dataProductId,
        segmentId: segmentId,
        domainId: domainId }, item.domainSegment);
};
var DomainSegmentsModule = /** @class */ (function () {
    function DomainSegmentsModule(xhr) {
        this.xhr = xhr;
    }
    DomainSegmentsModule.prototype.getDomainSegments = function (contractId, dataProductId, segmentId, query) {
        return this.xhr
            .get(routes_1.interpolate(routes_1.CONTRACT_DATA_PRODUCT_DOMAIN_SEGMENTS, { contractId: contractId, dataProductId: dataProductId, segmentId: segmentId }, query))
            .then(function (result) { return ({
            items: result.getData().domainSegments.items.map(exports.transformDomainSegment),
        }); });
    };
    DomainSegmentsModule.prototype.getDomainSegment = function (contractId, dataProductId, segmentId, domainId, query) {
        return this.xhr
            .get(routes_1.interpolate(routes_1.CONTRACT_DATA_PRODUCT_DOMAIN_SEGMENT, { contractId: contractId, dataProductId: dataProductId, segmentId: segmentId, domainId: domainId }, query))
            .then(function (result) { return exports.transformDomainSegment(result.getData()); });
    };
    DomainSegmentsModule.prototype.cloneDomainSegment = function (contractId, dataProductId, segmentId, domainId, newSegmentId, newDomainId) {
        return this.xhr.post(routes_1.interpolate(routes_1.CONTRACT_DATA_PRODUCT_DOMAIN_SEGMENT_CLONE, {
            contractId: contractId,
            dataProductId: dataProductId,
            segmentId: segmentId,
            domainId: domainId,
        }), {
            body: JSON.stringify({
                cloneSegmentRequest: {
                    clonedSegmentId: newSegmentId,
                    domain: newDomainId,
                },
            }),
        });
    };
    DomainSegmentsModule.prototype.deleteDomainSegment = function (contractId, dataProductId, segmentId, domainId) {
        return this.xhr.del(routes_1.interpolate(routes_1.CONTRACT_DATA_PRODUCT_DOMAIN_SEGMENT, {
            contractId: contractId,
            dataProductId: dataProductId,
            segmentId: segmentId,
            domainId: domainId,
        }));
    };
    DomainSegmentsModule.prototype.renameDomainSegment = function (contractId, dataProductId, segmentId, domainId, newSegmentId) {
        return this.xhr.post(routes_1.interpolate(routes_1.CONTRACT_DATA_PRODUCT_DOMAIN_SEGMENT_RENAME, {
            contractId: contractId,
            dataProductId: dataProductId,
            segmentId: segmentId,
            domainId: domainId,
        }), {
            body: JSON.stringify({
                domainSegmentRename: {
                    id: newSegmentId,
                },
            }),
        });
    };
    DomainSegmentsModule.prototype.syncDomainSegment = function (contractId, dataProductId, segmentId, domainId) {
        return this.xhr.post(routes_1.interpolate(routes_1.CONTRACT_DATA_PRODUCT_DOMAIN_SEGMENT_SYNC, {
            contractId: contractId,
            dataProductId: dataProductId,
            segmentId: segmentId,
            domainId: domainId,
        }));
    };
    DomainSegmentsModule.prototype.deployDomainSegment = function (contractId, dataProductId, segmentId, domainId, targetDomainId, synchronize) {
        return this.xhr.post(routes_1.interpolate(routes_1.DEPLOY_SEGMENT, { contractId: contractId, dataProductId: dataProductId, segmentId: segmentId, domainId: domainId }, synchronize && { synchronize: synchronize }), { body: JSON.stringify({ deploySegmentRequest: { domain: targetDomainId } }) });
    };
    DomainSegmentsModule.prototype.updateDomainSegment = function (domainSegment) {
        return this.xhr
            .put(routes_1.interpolate(routes_1.CONTRACT_DATA_PRODUCT_DOMAIN_SEGMENT, domainSegment), {
            body: JSON.stringify({
                domainSegment: omit_1.default(domainSegment, [
                    "contractId",
                    "dataProductId",
                    "segmentId",
                    "domainId",
                ]),
            }),
        })
            .then(function (result) { return result.json(); })
            .then(function (result) { return exports.transformDomainSegment(result); });
    };
    return DomainSegmentsModule;
}());
exports.DomainSegmentsModule = DomainSegmentsModule;
