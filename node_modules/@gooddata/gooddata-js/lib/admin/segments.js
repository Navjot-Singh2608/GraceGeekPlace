"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// (C) 2007-2018 GoodData Corporation
var routes_1 = require("./routes");
var domainSegments = __importStar(require("./domainSegments"));
exports.transformSegment = function (item) {
    var _a = routes_1.parse(item.segment.links.self, routes_1.CONTRACT_DATA_PRODUCT_SEGMENT), contractId = _a.contractId, dataProductId = _a.dataProductId;
    var segment = __assign({ contractId: contractId,
        dataProductId: dataProductId }, item.segment);
    if (segment.domainSegments) {
        segment.domainSegments = segment.domainSegments.map(domainSegments.transformDomainSegment);
    }
    return segment;
};
var SegmentsModule = /** @class */ (function () {
    function SegmentsModule(xhr) {
        this.xhr = xhr;
    }
    SegmentsModule.prototype.getDataProductSegments = function (contractId, dataProductId) {
        return this.xhr
            .get(routes_1.interpolate(routes_1.CONTRACT_DATA_PRODUCT_SEGMENTS, { contractId: contractId, dataProductId: dataProductId }))
            .then(function (r) { return r.getData(); })
            .then(function (data) { return ({
            items: data.segments.items.map(exports.transformSegment),
            status: data.segments.status,
        }); });
    };
    SegmentsModule.prototype.createSegment = function (contractId, dataProductId, segmentId, domainIds) {
        return this.xhr.post(routes_1.interpolate(routes_1.CONTRACT_DATA_PRODUCT_SEGMENTS, { contractId: contractId, dataProductId: dataProductId }), {
            body: JSON.stringify({
                segmentCreate: {
                    id: segmentId,
                    title: segmentId,
                    domains: domainIds.map(function (domainId) {
                        return routes_1.interpolate(routes_1.CONTRACT_DOMAIN, { contractId: contractId, domainId: domainId });
                    }),
                },
            }),
        });
    };
    SegmentsModule.prototype.renameSegment = function (contractId, dataProductId, segmentId, newSegmentId) {
        return this.xhr.post(routes_1.interpolate(routes_1.CONTRACT_DATA_PRODUCT_SEGMENT_RENAME, { contractId: contractId, dataProductId: dataProductId, segmentId: segmentId }), {
            body: JSON.stringify({ segmentRename: { id: newSegmentId } }),
        });
    };
    SegmentsModule.prototype.deleteSegment = function (contractId, dataProductId, segmentId) {
        return this.xhr.del(routes_1.interpolate(routes_1.CONTRACT_DATA_PRODUCT_SEGMENT, { contractId: contractId, dataProductId: dataProductId, segmentId: segmentId }));
    };
    return SegmentsModule;
}());
exports.SegmentsModule = SegmentsModule;
