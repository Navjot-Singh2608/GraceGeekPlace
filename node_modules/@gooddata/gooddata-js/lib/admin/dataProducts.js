"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// (C) 2007-2018 GoodData Corporation
var routes_1 = require("./routes");
var segments_1 = require("./segments");
var domainDataProducts = __importStar(require("./domainDataProducts"));
exports.transformDataProduct = function (item) {
    var contractId = routes_1.parse(item.dataProduct.links.self, routes_1.CONTRACT_DATA_PRODUCT).contractId;
    var dataProduct = __assign({ contractId: contractId }, item.dataProduct);
    if (dataProduct.domainDataProducts) {
        dataProduct.domainDataProducts = dataProduct.domainDataProducts.map(domainDataProducts.transformDomainDataProduct);
    }
    if (dataProduct.segments) {
        dataProduct.segments = dataProduct.segments.map(segments_1.transformSegment);
    }
    return dataProduct;
};
var DataProductsModule = /** @class */ (function () {
    function DataProductsModule(xhr) {
        this.xhr = xhr;
    }
    DataProductsModule.prototype.getDataProducts = function (contractId, include) {
        return this.xhr
            .get(routes_1.interpolate(routes_1.CONTRACT_DATA_PRODUCTS, { contractId: contractId }, include && { include: include }))
            .then(function (r) { return r.getData(); })
            .then(function (data) { return ({
            items: data.dataProducts.items.map(exports.transformDataProduct),
        }); });
    };
    DataProductsModule.prototype.getDataProduct = function (contractId, dataProductId, include, stats, state) {
        return this.xhr
            .get(routes_1.interpolate(routes_1.CONTRACT_DATA_PRODUCT, { contractId: contractId, dataProductId: dataProductId }, __assign({}, (include && { include: include }), (stats && { stats: stats }), (state && { state: state }))))
            .then(function (r) { return r.getData(); })
            .then(function (data) { return exports.transformDataProduct(data); });
    };
    DataProductsModule.prototype.createDataProduct = function (contractId, dataProductId, domainIds) {
        return this.xhr.post(routes_1.interpolate(routes_1.CONTRACT_DATA_PRODUCTS, { contractId: contractId }), {
            body: JSON.stringify({
                dataProductCreate: {
                    id: dataProductId,
                    domains: domainIds.map(function (domainId) {
                        return routes_1.interpolate(routes_1.CONTRACT_DOMAIN, { contractId: contractId, domainId: domainId });
                    }),
                },
            }),
        });
    };
    DataProductsModule.prototype.renameDataProduct = function (contractId, dataProductId, newDataProductId) {
        return this.xhr.post(routes_1.interpolate(routes_1.CONTRACT_DATA_PRODUCT_RENAME, { contractId: contractId, dataProductId: dataProductId }), {
            body: JSON.stringify({ dataProductRename: { id: newDataProductId } }),
        });
    };
    DataProductsModule.prototype.deleteDataProduct = function (contractId, dataProductId) {
        return this.xhr.del(routes_1.interpolate(routes_1.CONTRACT_DATA_PRODUCT, { contractId: contractId, dataProductId: dataProductId }));
    };
    return DataProductsModule;
}());
exports.DataProductsModule = DataProductsModule;
