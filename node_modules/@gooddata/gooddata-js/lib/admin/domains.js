"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
// (C) 2007-2018 GoodData Corporation
var routes_1 = require("./routes");
var transformDomain = function (item) {
    var _a = routes_1.parse(item.domain.links.self, routes_1.CONTRACT_DOMAIN), domainId = _a.domainId, contractId = _a.contractId;
    return __assign({ id: domainId, contractId: contractId }, item.domain);
};
var transformDomainUser = function (_a) {
    var user = _a.user;
    var params = routes_1.parse(user.links.domain, routes_1.CONTRACT_DOMAIN);
    return __assign({ id: user.login }, params, { fullName: user.firstName + " " + user.lastName }, user);
};
var DomainsModule = /** @class */ (function () {
    function DomainsModule(xhr) {
        this.xhr = xhr;
    }
    DomainsModule.prototype.getDomain = function (contractId, domainId, query) {
        var uri = routes_1.interpolate(routes_1.CONTRACT_DOMAIN, { contractId: contractId, domainId: domainId }, query);
        return this.xhr
            .get(uri)
            .then(function (r) { return r.getData(); })
            .then(transformDomain);
    };
    DomainsModule.prototype.getDomains = function (contractId, query) {
        return this.xhr
            .get(routes_1.interpolate(routes_1.CONTRACT_DOMAINS, { contractId: contractId }, query))
            .then(function (r) { return r.getData(); })
            .then(function (result) { return ({ items: result.domains.items.map(transformDomain) }); }); // TODO: paging?
    };
    DomainsModule.prototype.getDomainUsers = function (contractId, domainId, query, paging) {
        if (paging && !paging.next) {
            return Promise.resolve({ items: [], paging: {} });
        }
        var uri = paging
            ? paging.next
            : routes_1.interpolate(routes_1.CONTRACT_DOMAIN_USERS, { contractId: contractId, domainId: domainId }, query);
        return this.xhr
            .get(uri)
            .then(function (r) { return r.getData(); })
            .then(function (result) { return (__assign({}, result.domainUsers, { items: result.domainUsers.items.map(transformDomainUser) })); });
    };
    DomainsModule.prototype.getDomainProjects = function (contractId, domainId, state, query, paging) {
        var uri = null;
        if (paging) {
            if (!paging.next) {
                return Promise.resolve({ items: [], paging: {} });
            }
            uri = paging.next;
        }
        else {
            var queryObject = state || query
                ? __assign({}, (state ? { state: state } : undefined), (query ? { prefixSearch: query } : undefined)) : null;
            uri = routes_1.interpolate(routes_1.CONTRACT_DOMAIN_PROJECTS, { contractId: contractId, domainId: domainId }, queryObject);
        }
        return this.xhr
            .get(uri)
            .then(function (r) { return r.getData(); })
            .then(function (result) { return (__assign({}, result.domainProjects, { items: result.domainProjects.items.map(function (item) { return item.project; }) })); });
    };
    return DomainsModule;
}());
exports.DomainsModule = DomainsModule;
