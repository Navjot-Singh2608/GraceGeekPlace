"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
// (C) 2007-2018 GoodData Corporation
var routes_1 = require("./routes");
var ClientsModule = /** @class */ (function () {
    function ClientsModule(xhr) {
        this.xhr = xhr;
    }
    ClientsModule.prototype.getClient = function (contractId, dataProductId, segmentId, domainId, clientId) {
        var _this = this;
        var query = { stats: "user" };
        var uri = routes_1.interpolate(routes_1.CONTRACT_DATA_PRODUCT_DOMAIN_SEGMENT_CLIENT, { contractId: contractId, dataProductId: dataProductId, segmentId: segmentId, domainId: domainId, clientId: clientId }, query);
        return this.xhr
            .get(uri)
            .then(function (r) { return r.getData(); })
            .then(function (result) { return _this.transformClient(result); });
    };
    ClientsModule.prototype.getClients = function (contractId, dataProductId, segmentId, domainId, filter, paging) {
        var _this = this;
        var query = filter ? { clientPrefix: filter, stats: "user" } : { stats: "user" };
        var uri = paging
            ? paging.next
            : routes_1.interpolate(routes_1.CONTRACT_DATA_PRODUCT_DOMAIN_SEGMENT_CLIENTS, { contractId: contractId, dataProductId: dataProductId, segmentId: segmentId, domainId: domainId }, query);
        if (uri) {
            return this.xhr
                .get(uri)
                .then(function (r) { return r.getData(); })
                .then(function (result) { return ({
                items: result.clients.items.map(_this.transformClient),
                paging: result.clients.paging,
            }); });
        }
        return Promise.resolve({ items: [], paging: {} });
    };
    ClientsModule.prototype.getClientUsers = function (contractId, dataProductId, domainId, segmentId, clientId, query, paging) {
        var _this = this;
        if (paging && !paging.next) {
            return Promise.resolve({ items: [], paging: {} });
        }
        var uri = paging
            ? paging.next
            : routes_1.interpolate(routes_1.CONTRACT_DATA_PRODUCT_DOMAIN_SEGMENT_CLIENT_USERS, { contractId: contractId, dataProductId: dataProductId, domainId: domainId, segmentId: segmentId, clientId: clientId }, query);
        return this.xhr
            .get(uri)
            .then(function (r) { return r.getData(); })
            .then(function (result) { return (__assign({}, result.clientUsers, { items: result.clientUsers.items.map(_this.transformClientUser) })); });
    };
    ClientsModule.prototype.transformClient = function (item) {
        var _a = routes_1.parse(item.client.links.self, routes_1.CONTRACT_DATA_PRODUCT_DOMAIN_SEGMENT_CLIENT), contractId = _a.contractId, dataProductId = _a.dataProductId, domainId = _a.domainId, segmentId = _a.segmentId;
        return __assign({ contractId: contractId,
            dataProductId: dataProductId,
            domainId: domainId,
            segmentId: segmentId }, item.client);
    };
    ClientsModule.prototype.transformClientUser = function (user) {
        return __assign({ id: user.login, fullName: user.firstName + " " + user.lastName, role: user.roles[0] }, user);
    };
    return ClientsModule;
}());
exports.ClientsModule = ClientsModule;
