"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// (C) 2020 GoodData Corporation
var React = require("react");
var react_intl_1 = require("react-intl");
var FormatTemplatesDropdown_1 = require("./formatTemplatesDropdown/FormatTemplatesDropdown");
var SyntaxHighlightingInput_1 = require("./SyntaxHighlightingInput");
var FormatInput = /** @class */ (function (_super) {
    __extends(FormatInput, _super);
    function FormatInput() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleInputChange = function (value) {
            _this.props.onFormatChange(value);
        };
        return _this;
    }
    FormatInput.prototype.render = function () {
        var _a = this.props, format = _a.format, onFormatChange = _a.onFormatChange, separators = _a.separators, templates = _a.templates, intl = _a.intl;
        return (React.createElement("div", { className: "gd-measure-custom-format-dialog-section" },
            React.createElement("div", { className: "gd-measure-custom-format-dialog-section-title" },
                React.createElement("span", null, intl.formatMessage({ id: "measureNumberCustomFormatDialog.definition" })),
                templates && (React.createElement(FormatTemplatesDropdown_1.FormatTemplatesDropdown, { onChange: onFormatChange, separators: separators, templates: templates }))),
            React.createElement(SyntaxHighlightingInput_1.SyntaxHighlightingInput, { value: format, onChangeHandler: this.handleInputChange, className: "s-custom-format-input gd-input-syntax-highlighting-input" })));
    };
    return FormatInput;
}(React.PureComponent));
var FormatInputWithIntl = react_intl_1.injectIntl(FormatInput);
exports.default = FormatInputWithIntl;
//# sourceMappingURL=FormatInput.js.map