"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// (C) 2007-2020 GoodData Corporation
var cloneDeep = require("lodash/cloneDeep");
var difference = require("lodash/difference");
var agGridUtils_1 = require("./agGridUtils");
var agGridConst_1 = require("./agGridConst");
var agGridHeaders_1 = require("./agGridHeaders");
var invariant = require("invariant");
var PivotTable_1 = require("../../../interfaces/PivotTable");
exports.MIN_WIDTH = 60;
exports.AUTO_SIZED_MAX_WIDTH = 500;
exports.MANUALLY_SIZED_MAX_WIDTH = 2000;
/*
 * All code related to column resizing the ag-grid backed Pivot Table is concentrated here
 */
exports.convertColumnWidthsToMap = function (columnWidths, executionResponse, widthValidator) {
    if (widthValidator === void 0) { widthValidator = exports.defaultWidthValidator; }
    if (!columnWidths || !executionResponse) {
        return {};
    }
    var dimensions = executionResponse.dimensions;
    var columnWidthsMap = {};
    var _a = agGridHeaders_1.assortDimensionHeaders(dimensions), attributeHeaders = _a.attributeHeaders, measureHeaderItems = _a.measureHeaderItems;
    columnWidths.forEach(function (columnWidth) {
        if (PivotTable_1.isAttributeColumnWidthItem(columnWidth)) {
            var _a = getAttributeColumnWidthItemFieldAndWidth(columnWidth, attributeHeaders), field = _a[0], width = _a[1];
            columnWidthsMap[field] = {
                width: widthValidator(width),
                source: PivotTable_1.ColumnEventSourceType.UI_DRAGGED,
            };
        }
        if (PivotTable_1.isMeasureColumnWidthItem(columnWidth)) {
            var _b = getMeasureColumnWidthItemFieldAndWidth(columnWidth, measureHeaderItems), field = _b[0], width = _b[1];
            columnWidthsMap[field] = {
                width: widthValidator(width),
                source: PivotTable_1.ColumnEventSourceType.UI_DRAGGED,
            };
        }
    });
    return columnWidthsMap;
};
var getAttributeColumnWidthItemFieldAndWidth = function (columnWidthItem, attributeHeaders) {
    var localIdentifier = columnWidthItem.attributeColumnWidthItem.attributeIdentifier;
    var attributeHeader = attributeHeaders.find(function (header) { return header.attributeHeader.localIdentifier === localIdentifier; });
    invariant(attributeHeader, "Could not find attributeHeader with localIdentifier \"" + localIdentifier + "\"");
    var field = agGridHeaders_1.identifyResponseHeader(attributeHeader);
    return [field, columnWidthItem.attributeColumnWidthItem.width];
};
var getMeasureColumnWidthItemFieldAndWidth = function (columnWidthItem, measureHeaderItems) {
    var keys = [];
    columnWidthItem.measureColumnWidthItem.locators.forEach(function (locator) {
        if (PivotTable_1.isMeasureLocatorItem(locator)) {
            var measureColumnWidthHeaderIndex = measureHeaderItems.findIndex(function (measureHeaderItem) {
                return measureHeaderItem.measureHeaderItem.localIdentifier ===
                    locator.measureLocatorItem.measureIdentifier;
            });
            invariant(measureColumnWidthHeaderIndex !== -1, "Could not find measureHeader with localIdentifier \"" + locator.measureLocatorItem.measureIdentifier + "\"");
            keys.push("m" + agGridConst_1.ID_SEPARATOR + measureColumnWidthHeaderIndex);
        }
        else {
            var key = "a" + agGridConst_1.ID_SEPARATOR + agGridUtils_1.getIdsFromUri(locator.attributeLocatorItem.element).join(agGridConst_1.ID_SEPARATOR);
            keys.push(key);
        }
    });
    var field = keys.join(agGridConst_1.FIELD_SEPARATOR);
    return [field, columnWidthItem.measureColumnWidthItem.width];
};
var getSizeItemByColId = function (execution, colId, width) {
    var dimensions = execution.executionResponse.dimensions;
    var fields = agGridUtils_1.getParsedFields(colId);
    var lastFieldType = agGridUtils_1.getLastFieldType(fields);
    var lastFieldId = agGridUtils_1.getLastFieldId(fields);
    var searchDimensionIndex = lastFieldType === agGridConst_1.FIELD_TYPE_MEASURE ? 1 : 0;
    var _a = agGridHeaders_1.assortDimensionHeaders([
        dimensions[searchDimensionIndex],
    ]), attributeHeaders = _a.attributeHeaders, measureHeaderItems = _a.measureHeaderItems;
    if (lastFieldType === agGridConst_1.FIELD_TYPE_ATTRIBUTE) {
        for (var _i = 0, attributeHeaders_1 = attributeHeaders; _i < attributeHeaders_1.length; _i++) {
            var header = attributeHeaders_1[_i];
            if (agGridUtils_1.getIdsFromUri(header.attributeHeader.uri)[0] === lastFieldId) {
                var attributeIdentifier = header.attributeHeader.localIdentifier;
                return {
                    attributeColumnWidthItem: {
                        width: width,
                        attributeIdentifier: attributeIdentifier,
                    },
                };
            }
        }
        // check only column attribute without measure
        var columnAttributeHeaders = agGridHeaders_1.assortDimensionHeaders([dimensions[1]]).attributeHeaders;
        var EMPTY_MEASURE_FIELD = [];
        var attributeLocators = agGridUtils_1.getAttributeLocators(fields.concat([EMPTY_MEASURE_FIELD]), columnAttributeHeaders);
        if (attributeLocators) {
            return {
                measureColumnWidthItem: {
                    width: width,
                    locators: attributeLocators.slice(),
                },
            };
        }
        invariant(false, "could not find attribute header matching " + colId);
    }
    else if (lastFieldType === agGridConst_1.FIELD_TYPE_MEASURE) {
        var headerItem = measureHeaderItems[parseInt(lastFieldId, 10)];
        var attributeLocators = agGridUtils_1.getAttributeLocators(fields, attributeHeaders);
        return {
            measureColumnWidthItem: {
                width: width,
                locators: attributeLocators.concat([
                    {
                        measureLocatorItem: {
                            measureIdentifier: headerItem.measureHeaderItem.localIdentifier,
                        },
                    },
                ]),
            },
        };
    }
    invariant(false, "could not find header matching " + colId);
};
exports.getColumnWidthsFromMap = function (map, execution) {
    return Object.keys(map).map(function (colId) {
        var width = map[colId].width;
        var sizeItem = getSizeItemByColId(execution, colId, width);
        invariant(sizeItem, "unable to find size item by filed " + colId);
        return sizeItem;
    });
};
exports.defaultWidthValidator = function (width) {
    return Math.min(Math.max(width, exports.MIN_WIDTH), exports.MANUALLY_SIZED_MAX_WIDTH);
};
exports.enrichColumnDefinitionsWithWidths = function (columnDefinitions, manuallyResizedColumns, autoResizedColumns, defaultColumnWidth, isGrowToFitEnabled, growToFittedColumns) {
    if (growToFittedColumns === void 0) { growToFittedColumns = {}; }
    var result = cloneDeep(columnDefinitions);
    var leaves = agGridUtils_1.getTreeLeaves(result);
    leaves.forEach(function (columnDefinition) {
        if (columnDefinition) {
            var manualSize = manuallyResizedColumns[agGridUtils_1.getColumnIdentifierFromDef(columnDefinition)];
            var autoResizeSize = autoResizedColumns[agGridUtils_1.getColumnIdentifierFromDef(columnDefinition)];
            columnDefinition.maxWidth = exports.MANUALLY_SIZED_MAX_WIDTH;
            if (manualSize) {
                columnDefinition.width = manualSize.width;
                columnDefinition.suppressSizeToFit = true;
            }
            else {
                columnDefinition.suppressSizeToFit = false;
                columnDefinition.width = autoResizeSize ? autoResizeSize.width : defaultColumnWidth;
                if (isGrowToFitEnabled) {
                    var growToFittedColumn = growToFittedColumns[agGridUtils_1.getColumnIdentifierFromDef(columnDefinition)];
                    if (growToFittedColumn) {
                        columnDefinition.width = growToFittedColumn.width;
                        if (growToFittedColumn.width > exports.MANUALLY_SIZED_MAX_WIDTH) {
                            columnDefinition.maxWidth = undefined;
                        }
                    }
                }
            }
        }
    });
    return result;
};
exports.syncSuppressSizeToFitOnColumns = function (oldManuallyResizedColumns, newManuallyResizedColumns, columnApi) {
    if (!columnApi) {
        return;
    }
    var oldColumnIds = Object.keys(oldManuallyResizedColumns);
    var newColumnIds = Object.keys(newManuallyResizedColumns);
    var removedColumnIds = difference(oldColumnIds, newColumnIds);
    var addedColumnIds = difference(newColumnIds, oldColumnIds);
    var columns = columnApi.getAllColumns();
    columns.forEach(function (col) {
        var field = agGridUtils_1.getColumnIdentifier(col);
        if (removedColumnIds.indexOf(field) !== -1) {
            col.getColDef().suppressSizeToFit = false;
        }
        if (addedColumnIds.indexOf(field) !== -1) {
            col.getColDef().suppressSizeToFit = true;
        }
    });
};
exports.isColumnAutoResized = function (autoResizedColumns, resizedColumnId) {
    return resizedColumnId && autoResizedColumns[resizedColumnId];
};
exports.isColumnManuallyResized = function (manuallyResizedColumns, resizedColumnId) {
    return resizedColumnId && manuallyResizedColumns[resizedColumnId];
};
exports.resetColumnsWidthToDefault = function (columnApi, columns, manuallyResizedColumns, autoResizedColumns, defaultWidth) {
    columns.forEach(function (col) {
        var id = agGridUtils_1.getColumnIdentifier(col);
        if (exports.isColumnManuallyResized(manuallyResizedColumns, id)) {
            columnApi.setColumnWidth(col, manuallyResizedColumns[id].width);
        }
        else if (exports.isColumnAutoResized(autoResizedColumns, id)) {
            columnApi.setColumnWidth(col, autoResizedColumns[id].width);
        }
        else {
            columnApi.setColumnWidth(col, defaultWidth);
        }
    });
};
//# sourceMappingURL=agGridColumnSizing.js.map