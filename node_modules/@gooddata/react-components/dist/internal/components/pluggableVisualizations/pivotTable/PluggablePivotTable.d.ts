import { AFM, VisualizationObject } from "@gooddata/typings";
import * as VisEvents from "../../../../interfaces/Events";
import { IBucket, IBucketFilter, IBucketItem, IExtendedReferencePoint, IReferencePoint, IVisConstruct, IVisProps, IVisualizationProperties } from "../../../interfaces/Visualization";
import { AbstractPluggableVisualization } from "../AbstractPluggableVisualization";
import { IPivotTableProps } from "../../../../components/core/PivotTable";
import { IPivotTableConfig } from "../../../../interfaces/PivotTable";
export declare const getColumnAttributes: (buckets: IBucket[]) => IBucketItem[];
export declare const getRowAttributes: (buckets: IBucket[]) => IBucketItem[];
export declare function adaptReferencePointSortItemsToPivotTable(originalSortItems: AFM.SortItem[], measures: IBucketItem[], rowAttributes: IBucketItem[], columnAttributes: IBucketItem[]): AFM.SortItem[];
export declare const isSortItemVisible: (sortItem: AFM.SortItem, filters: IBucketFilter[]) => boolean;
export declare function addDefaultSort(sortItems: AFM.SortItem[], filters: IBucketFilter[], rowAttributes: IBucketItem[], previousRowAttributes?: IBucketItem[]): AFM.SortItem[];
export declare class PluggablePivotTable extends AbstractPluggableVisualization {
    private projectId;
    private element;
    private configPanelElement;
    private callbacks;
    private intl;
    private visualizationProperties;
    private locale;
    private environment;
    private featureFlags;
    constructor(props: IVisConstruct);
    unmount(): void;
    update(options: IVisProps, visualizationProperties: IVisualizationProperties, mdObject: VisualizationObject.IVisualizationObjectContent): void;
    getExtendedReferencePoint(referencePoint: IReferencePoint, previousReferencePoint?: IReferencePoint): Promise<IExtendedReferencePoint>;
    getExtendedPivotTableProps(pivotTableProps: IPivotTableProps, config: IPivotTableConfig): IPivotTableProps;
    protected renderVisualization(options: IVisProps, visualizationProperties: IVisualizationProperties, mdObject: VisualizationObject.IVisualizationObjectContent): void;
    protected onExportReady(exportResult: VisEvents.IExportFunction): void;
    protected renderConfigurationPanel(mdObject: VisualizationObject.IVisualizationObjectContent): void;
    protected getDimensions(mdObject: VisualizationObject.IVisualizationObjectContent): AFM.IDimension[];
    private enrichConfigWithMenu;
    private enrichConfigWithColumnSizing;
    private enrichConfigWithAutosize;
    private enrichConfigWithGrowToFit;
}
