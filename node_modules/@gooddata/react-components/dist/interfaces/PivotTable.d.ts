import { ISeparators } from "@gooddata/numberjs";
import { AFM } from "@gooddata/typings";
export interface IMenu {
    aggregations?: boolean;
    aggregationsSubMenu?: boolean;
}
export declare type DefaultColumnWidth = "viewport" | "unset";
export interface IColumnSizing {
    defaultWidth?: DefaultColumnWidth;
    growToFit?: boolean;
    columnWidths?: ColumnWidthItem[];
}
export interface IPivotTableConfig {
    columnSizing?: IColumnSizing;
    separators?: ISeparators;
    menu?: IMenu;
    maxHeight?: number;
}
export interface IMenuAggregationClickConfig {
    type: AFM.TotalType;
    measureIdentifiers: string[];
    attributeIdentifier: string;
    include: boolean;
}
export declare enum ColumnEventSourceType {
    AUTOSIZE_COLUMNS = "autosizeColumns",
    UI_DRAGGED = "uiColumnDragged",
    FIT_GROW = "growToFit"
}
export declare enum UIClick {
    CLICK = 1,
    DOUBLE_CLICK = 2
}
export interface IResizedColumns {
    [columnIdentifier: string]: {
        width: number;
        source: ColumnEventSourceType;
    };
}
export declare type ColumnWidthItem = IAttributeColumnWidthItem | IMeasureColumnWidthItem;
export declare type ColumnWidth = number;
export interface IAttributeColumnWidthItem {
    attributeColumnWidthItem: {
        width: ColumnWidth;
        attributeIdentifier: AFM.Identifier;
        aggregation?: "sum";
    };
}
export interface IMeasureColumnWidthItem {
    measureColumnWidthItem: {
        width: ColumnWidth;
        locators: LocatorItem[];
    };
}
declare type LocatorItem = IAttributeLocatorItem | AFM.IMeasureLocatorItem;
interface IAttributeLocatorItem {
    attributeLocatorItem: {
        attributeIdentifier: AFM.Identifier;
        element?: string;
    };
}
export declare function isAttributeColumnWidthItem(columnWidthItem: ColumnWidthItem): columnWidthItem is IAttributeColumnWidthItem;
export declare function isMeasureColumnWidthItem(columnWidthItem: ColumnWidthItem): columnWidthItem is IMeasureColumnWidthItem;
export declare function isMeasureLocatorItem(locator: LocatorItem): locator is AFM.IMeasureLocatorItem;
export {};
