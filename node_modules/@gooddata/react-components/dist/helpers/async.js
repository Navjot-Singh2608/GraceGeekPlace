"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// (C) 2007-2018 GoodData Corporation
var identity = require("lodash/identity");
var Subject_1 = require("rxjs/Subject");
var Subscription_1 = require("rxjs/Subscription");
exports.Subscription = Subscription_1.Subscription;
require("rxjs/add/operator/switchMap");
require("rxjs/add/operator/catch");
/**
 * Creates infinite stream
 * Usage:
 * const subject = createSubject(
 *      (result) => console.log('Success:', result),
 *      (error) => console.error('Error:', error)
 * );
 * subject.next(promise1);
 * subject.next(promise2);
 *
 * subject.unsubscribe();
 *
 * @param successHandler
 * @param errorHandler
 */
function createSubject(successHandler, errorHandler) {
    var subject = new Subject_1.Subject();
    var subscription = subject
        // This ensures we get last added promise
        .switchMap(identity)
        // Streams are closed on error by default so we need this workaround
        .catch(function (error, caught) {
        errorHandler(error); // handle error
        return caught; // stream continue
    })
        .subscribe(successHandler);
    var wrapper = {
        next: function (promise) {
            subject.next(promise);
        },
        unsubscribe: function () {
            subscription.unsubscribe();
            subject.unsubscribe();
        },
    };
    return wrapper;
}
exports.createSubject = createSubject;
//# sourceMappingURL=async.js.map